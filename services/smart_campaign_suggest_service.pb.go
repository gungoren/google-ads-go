// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.2
// source: google/ads/googleads/v8/services/smart_campaign_suggest_service.proto

package services

import (
	context "context"
	common "github.com/opteo/google-ads-go/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for
// [SmartCampaignBudgetSuggestService.SuggestSmartCampaignBudgets][].
type SuggestSmartCampaignBudgetOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ID of the customer whose budget options are to be suggested.
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Required. For first time campaign creation use SuggestionInfo, for
	// subsequent updates on BudgetOptions based on an already created campaign
	// use that campaign.
	//
	// Types that are assignable to SuggestionData:
	//	*SuggestSmartCampaignBudgetOptionsRequest_Campaign
	//	*SuggestSmartCampaignBudgetOptionsRequest_SuggestionInfo
	SuggestionData isSuggestSmartCampaignBudgetOptionsRequest_SuggestionData `protobuf_oneof:"suggestion_data"`
}

func (x *SuggestSmartCampaignBudgetOptionsRequest) Reset() {
	*x = SuggestSmartCampaignBudgetOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestSmartCampaignBudgetOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestSmartCampaignBudgetOptionsRequest) ProtoMessage() {}

func (x *SuggestSmartCampaignBudgetOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestSmartCampaignBudgetOptionsRequest.ProtoReflect.Descriptor instead.
func (*SuggestSmartCampaignBudgetOptionsRequest) Descriptor() ([]byte, []int) {
	return file_services_smart_campaign_suggest_service_proto_rawDescGZIP(), []int{0}
}

func (x *SuggestSmartCampaignBudgetOptionsRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (m *SuggestSmartCampaignBudgetOptionsRequest) GetSuggestionData() isSuggestSmartCampaignBudgetOptionsRequest_SuggestionData {
	if m != nil {
		return m.SuggestionData
	}
	return nil
}

func (x *SuggestSmartCampaignBudgetOptionsRequest) GetCampaign() string {
	if x, ok := x.GetSuggestionData().(*SuggestSmartCampaignBudgetOptionsRequest_Campaign); ok {
		return x.Campaign
	}
	return ""
}

func (x *SuggestSmartCampaignBudgetOptionsRequest) GetSuggestionInfo() *SmartCampaignSuggestionInfo {
	if x, ok := x.GetSuggestionData().(*SuggestSmartCampaignBudgetOptionsRequest_SuggestionInfo); ok {
		return x.SuggestionInfo
	}
	return nil
}

type isSuggestSmartCampaignBudgetOptionsRequest_SuggestionData interface {
	isSuggestSmartCampaignBudgetOptionsRequest_SuggestionData()
}

type SuggestSmartCampaignBudgetOptionsRequest_Campaign struct {
	// Required. The resource name of the campaign to get suggestion for.
	Campaign string `protobuf:"bytes,2,opt,name=campaign,proto3,oneof"`
}

type SuggestSmartCampaignBudgetOptionsRequest_SuggestionInfo struct {
	// Required. Information needed to get budget options
	SuggestionInfo *SmartCampaignSuggestionInfo `protobuf:"bytes,3,opt,name=suggestion_info,json=suggestionInfo,proto3,oneof"`
}

func (*SuggestSmartCampaignBudgetOptionsRequest_Campaign) isSuggestSmartCampaignBudgetOptionsRequest_SuggestionData() {
}

func (*SuggestSmartCampaignBudgetOptionsRequest_SuggestionInfo) isSuggestSmartCampaignBudgetOptionsRequest_SuggestionData() {
}

// Information needed to get suggestion for Smart Campaign. More information
// provided will help the system to derive better suggestions.
type SmartCampaignSuggestionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Landing page URL of the campaign.
	FinalUrl string `protobuf:"bytes,1,opt,name=final_url,json=finalUrl,proto3" json:"final_url,omitempty"`
	// Optional. The ID of the Google My Business (GMB) Location.
	// The location ID can be fetched by GMB API with its form:
	// accounts/{accountId}/locations/{locationId}. The last {locationId}
	// component from the GMB API represents the business_location_id.
	// See the [Google My Business API]
	// (https://developers.google.com/my-business/reference/rest/v4/accounts.locations)
	BusinessLocationId int64 `protobuf:"varint,2,opt,name=business_location_id,json=businessLocationId,proto3" json:"business_location_id,omitempty"`
	// Optional. The two letter advertising language for the Smart campaign to be
	// constructed, default to 'en' if not set.
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// Optional. The business ad schedule.
	AdSchedules []*common.AdScheduleInfo `protobuf:"bytes,6,rep,name=ad_schedules,json=adSchedules,proto3" json:"ad_schedules,omitempty"`
	// Optional. Smart campaign keyword themes. This field may greatly improve suggestion
	// accuracy and we recommend always setting it if possible.
	KeywordThemes []*common.KeywordThemeInfo `protobuf:"bytes,7,rep,name=keyword_themes,json=keywordThemes,proto3" json:"keyword_themes,omitempty"`
	// The geo target of the campaign, either a list of locations or
	// a single proximity shall be specified.
	//
	// Types that are assignable to GeoTarget:
	//	*SmartCampaignSuggestionInfo_LocationList_
	//	*SmartCampaignSuggestionInfo_Proximity
	GeoTarget isSmartCampaignSuggestionInfo_GeoTarget `protobuf_oneof:"geo_target"`
}

func (x *SmartCampaignSuggestionInfo) Reset() {
	*x = SmartCampaignSuggestionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartCampaignSuggestionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartCampaignSuggestionInfo) ProtoMessage() {}

func (x *SmartCampaignSuggestionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartCampaignSuggestionInfo.ProtoReflect.Descriptor instead.
func (*SmartCampaignSuggestionInfo) Descriptor() ([]byte, []int) {
	return file_services_smart_campaign_suggest_service_proto_rawDescGZIP(), []int{1}
}

func (x *SmartCampaignSuggestionInfo) GetFinalUrl() string {
	if x != nil {
		return x.FinalUrl
	}
	return ""
}

func (x *SmartCampaignSuggestionInfo) GetBusinessLocationId() int64 {
	if x != nil {
		return x.BusinessLocationId
	}
	return 0
}

func (x *SmartCampaignSuggestionInfo) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *SmartCampaignSuggestionInfo) GetAdSchedules() []*common.AdScheduleInfo {
	if x != nil {
		return x.AdSchedules
	}
	return nil
}

func (x *SmartCampaignSuggestionInfo) GetKeywordThemes() []*common.KeywordThemeInfo {
	if x != nil {
		return x.KeywordThemes
	}
	return nil
}

func (m *SmartCampaignSuggestionInfo) GetGeoTarget() isSmartCampaignSuggestionInfo_GeoTarget {
	if m != nil {
		return m.GeoTarget
	}
	return nil
}

func (x *SmartCampaignSuggestionInfo) GetLocationList() *SmartCampaignSuggestionInfo_LocationList {
	if x, ok := x.GetGeoTarget().(*SmartCampaignSuggestionInfo_LocationList_); ok {
		return x.LocationList
	}
	return nil
}

func (x *SmartCampaignSuggestionInfo) GetProximity() *common.ProximityInfo {
	if x, ok := x.GetGeoTarget().(*SmartCampaignSuggestionInfo_Proximity); ok {
		return x.Proximity
	}
	return nil
}

type isSmartCampaignSuggestionInfo_GeoTarget interface {
	isSmartCampaignSuggestionInfo_GeoTarget()
}

type SmartCampaignSuggestionInfo_LocationList_ struct {
	// Optional. The targeting geo location by locations.
	LocationList *SmartCampaignSuggestionInfo_LocationList `protobuf:"bytes,4,opt,name=location_list,json=locationList,proto3,oneof"`
}

type SmartCampaignSuggestionInfo_Proximity struct {
	// Optional. The targeting geo location by proximity.
	Proximity *common.ProximityInfo `protobuf:"bytes,5,opt,name=proximity,proto3,oneof"`
}

func (*SmartCampaignSuggestionInfo_LocationList_) isSmartCampaignSuggestionInfo_GeoTarget() {}

func (*SmartCampaignSuggestionInfo_Proximity) isSmartCampaignSuggestionInfo_GeoTarget() {}

// Response message for
// [SmartCampaignBudgetSuggestService.SuggestSmartCampaignBudgets][]. Depending
// on whether the system could suggest the options, either all of the options or
// none of them might be returned.
type SuggestSmartCampaignBudgetOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The lowest budget option.
	Low *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption `protobuf:"bytes,1,opt,name=low,proto3,oneof" json:"low,omitempty"`
	// Optional. The recommended budget option.
	Recommended *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption `protobuf:"bytes,2,opt,name=recommended,proto3,oneof" json:"recommended,omitempty"`
	// Optional. The highest budget option.
	High *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption `protobuf:"bytes,3,opt,name=high,proto3,oneof" json:"high,omitempty"`
}

func (x *SuggestSmartCampaignBudgetOptionsResponse) Reset() {
	*x = SuggestSmartCampaignBudgetOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestSmartCampaignBudgetOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestSmartCampaignBudgetOptionsResponse) ProtoMessage() {}

func (x *SuggestSmartCampaignBudgetOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestSmartCampaignBudgetOptionsResponse.ProtoReflect.Descriptor instead.
func (*SuggestSmartCampaignBudgetOptionsResponse) Descriptor() ([]byte, []int) {
	return file_services_smart_campaign_suggest_service_proto_rawDescGZIP(), []int{2}
}

func (x *SuggestSmartCampaignBudgetOptionsResponse) GetLow() *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *SuggestSmartCampaignBudgetOptionsResponse) GetRecommended() *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption {
	if x != nil {
		return x.Recommended
	}
	return nil
}

func (x *SuggestSmartCampaignBudgetOptionsResponse) GetHigh() *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption {
	if x != nil {
		return x.High
	}
	return nil
}

// A list of locations.
type SmartCampaignSuggestionInfo_LocationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Locations.
	Locations []*common.LocationInfo `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *SmartCampaignSuggestionInfo_LocationList) Reset() {
	*x = SmartCampaignSuggestionInfo_LocationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartCampaignSuggestionInfo_LocationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartCampaignSuggestionInfo_LocationList) ProtoMessage() {}

func (x *SmartCampaignSuggestionInfo_LocationList) ProtoReflect() protoreflect.Message {
	mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartCampaignSuggestionInfo_LocationList.ProtoReflect.Descriptor instead.
func (*SmartCampaignSuggestionInfo_LocationList) Descriptor() ([]byte, []int) {
	return file_services_smart_campaign_suggest_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SmartCampaignSuggestionInfo_LocationList) GetLocations() []*common.LocationInfo {
	if x != nil {
		return x.Locations
	}
	return nil
}

// Performance metrics for a given budget option.
type SuggestSmartCampaignBudgetOptionsResponse_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The estimated min daily clicks.
	MinDailyClicks int64 `protobuf:"varint,1,opt,name=min_daily_clicks,json=minDailyClicks,proto3" json:"min_daily_clicks,omitempty"`
	// The estimated max daily clicks.
	MaxDailyClicks int64 `protobuf:"varint,2,opt,name=max_daily_clicks,json=maxDailyClicks,proto3" json:"max_daily_clicks,omitempty"`
}

func (x *SuggestSmartCampaignBudgetOptionsResponse_Metrics) Reset() {
	*x = SuggestSmartCampaignBudgetOptionsResponse_Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestSmartCampaignBudgetOptionsResponse_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestSmartCampaignBudgetOptionsResponse_Metrics) ProtoMessage() {}

func (x *SuggestSmartCampaignBudgetOptionsResponse_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestSmartCampaignBudgetOptionsResponse_Metrics.ProtoReflect.Descriptor instead.
func (*SuggestSmartCampaignBudgetOptionsResponse_Metrics) Descriptor() ([]byte, []int) {
	return file_services_smart_campaign_suggest_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SuggestSmartCampaignBudgetOptionsResponse_Metrics) GetMinDailyClicks() int64 {
	if x != nil {
		return x.MinDailyClicks
	}
	return 0
}

func (x *SuggestSmartCampaignBudgetOptionsResponse_Metrics) GetMaxDailyClicks() int64 {
	if x != nil {
		return x.MaxDailyClicks
	}
	return 0
}

// Smart Campaign budget option.
type SuggestSmartCampaignBudgetOptionsResponse_BudgetOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of the budget, in the local currency for the account.
	// Amount is specified in micros, where one million is equivalent to one
	// currency unit.
	DailyAmountMicros int64 `protobuf:"varint,1,opt,name=daily_amount_micros,json=dailyAmountMicros,proto3" json:"daily_amount_micros,omitempty"`
	// Metrics pertaining to the suggested budget, could be empty if there is
	// not enough information to derive the estimates.
	Metrics *SuggestSmartCampaignBudgetOptionsResponse_Metrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption) Reset() {
	*x = SuggestSmartCampaignBudgetOptionsResponse_BudgetOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestSmartCampaignBudgetOptionsResponse_BudgetOption) ProtoMessage() {}

func (x *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption) ProtoReflect() protoreflect.Message {
	mi := &file_services_smart_campaign_suggest_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestSmartCampaignBudgetOptionsResponse_BudgetOption.ProtoReflect.Descriptor instead.
func (*SuggestSmartCampaignBudgetOptionsResponse_BudgetOption) Descriptor() ([]byte, []int) {
	return file_services_smart_campaign_suggest_service_proto_rawDescGZIP(), []int{2, 1}
}

func (x *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption) GetDailyAmountMicros() int64 {
	if x != nil {
		return x.DailyAmountMicros
	}
	return 0
}

func (x *SuggestSmartCampaignBudgetOptionsResponse_BudgetOption) GetMetrics() *SuggestSmartCampaignBudgetOptionsResponse_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_services_smart_campaign_suggest_service_proto protoreflect.FileDescriptor

var file_services_smart_campaign_suggest_service_proto_rawDesc = []byte{
	0x0a, 0x45, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x38, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x38,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x2d, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2f,
	0x76, 0x38, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x02, 0x0a, 0x28,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x6d, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x38, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x05, 0x0a, 0x1b, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x14, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x0c,
	0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x38, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x64, 0x73, 0x2e, 0x76, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x12, 0x76, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x76, 0x38, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6d, 0x61,
	0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x1a, 0x5f,
	0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x67, 0x65, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xd0, 0x05,
	0x0a, 0x29, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x38, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x88, 0x01,
	0x01, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76,
	0x38, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42,
	0x75, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x38,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x88, 0x01, 0x01,
	0x1a, 0x5d, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x1a,
	0xad, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x12, 0x6d, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x53, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x38, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x32, 0xef, 0x02, 0x0a, 0x1b, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x88, 0x02, 0x0a, 0x21, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x38,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x76, 0x38, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x53, 0x6d, 0x61,
	0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x22, 0x3f, 0x2f, 0x76, 0x38, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x1a, 0x45, 0xca, 0x41, 0x18,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x64, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x42, 0x87, 0x02, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x2e,
	0x76, 0x38, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x20, 0x53, 0x6d, 0x61,
	0x72, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x48, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x64, 0x73, 0x2f, 0x76, 0x38, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x47, 0x41, 0x41, 0xaa,
	0x02, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x2e, 0x56, 0x38, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0xca, 0x02, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x5c, 0x56, 0x38, 0x5c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0xea, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a,
	0x41, 0x64, 0x73, 0x3a, 0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x3a, 0x3a,
	0x56, 0x38, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_smart_campaign_suggest_service_proto_rawDescOnce sync.Once
	file_services_smart_campaign_suggest_service_proto_rawDescData = file_services_smart_campaign_suggest_service_proto_rawDesc
)

func file_services_smart_campaign_suggest_service_proto_rawDescGZIP() []byte {
	file_services_smart_campaign_suggest_service_proto_rawDescOnce.Do(func() {
		file_services_smart_campaign_suggest_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_smart_campaign_suggest_service_proto_rawDescData)
	})
	return file_services_smart_campaign_suggest_service_proto_rawDescData
}

var file_services_smart_campaign_suggest_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_services_smart_campaign_suggest_service_proto_goTypes = []interface{}{
	(*SuggestSmartCampaignBudgetOptionsRequest)(nil),               // 0: google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsRequest
	(*SmartCampaignSuggestionInfo)(nil),                            // 1: google.ads.googleads.v8.services.SmartCampaignSuggestionInfo
	(*SuggestSmartCampaignBudgetOptionsResponse)(nil),              // 2: google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse
	(*SmartCampaignSuggestionInfo_LocationList)(nil),               // 3: google.ads.googleads.v8.services.SmartCampaignSuggestionInfo.LocationList
	(*SuggestSmartCampaignBudgetOptionsResponse_Metrics)(nil),      // 4: google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse.Metrics
	(*SuggestSmartCampaignBudgetOptionsResponse_BudgetOption)(nil), // 5: google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse.BudgetOption
	(*common.AdScheduleInfo)(nil),                                  // 6: google.ads.googleads.v8.common.AdScheduleInfo
	(*common.KeywordThemeInfo)(nil),                                // 7: google.ads.googleads.v8.common.KeywordThemeInfo
	(*common.ProximityInfo)(nil),                                   // 8: google.ads.googleads.v8.common.ProximityInfo
	(*common.LocationInfo)(nil),                                    // 9: google.ads.googleads.v8.common.LocationInfo
}
var file_services_smart_campaign_suggest_service_proto_depIdxs = []int32{
	1,  // 0: google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsRequest.suggestion_info:type_name -> google.ads.googleads.v8.services.SmartCampaignSuggestionInfo
	6,  // 1: google.ads.googleads.v8.services.SmartCampaignSuggestionInfo.ad_schedules:type_name -> google.ads.googleads.v8.common.AdScheduleInfo
	7,  // 2: google.ads.googleads.v8.services.SmartCampaignSuggestionInfo.keyword_themes:type_name -> google.ads.googleads.v8.common.KeywordThemeInfo
	3,  // 3: google.ads.googleads.v8.services.SmartCampaignSuggestionInfo.location_list:type_name -> google.ads.googleads.v8.services.SmartCampaignSuggestionInfo.LocationList
	8,  // 4: google.ads.googleads.v8.services.SmartCampaignSuggestionInfo.proximity:type_name -> google.ads.googleads.v8.common.ProximityInfo
	5,  // 5: google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse.low:type_name -> google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse.BudgetOption
	5,  // 6: google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse.recommended:type_name -> google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse.BudgetOption
	5,  // 7: google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse.high:type_name -> google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse.BudgetOption
	9,  // 8: google.ads.googleads.v8.services.SmartCampaignSuggestionInfo.LocationList.locations:type_name -> google.ads.googleads.v8.common.LocationInfo
	4,  // 9: google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse.BudgetOption.metrics:type_name -> google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse.Metrics
	0,  // 10: google.ads.googleads.v8.services.SmartCampaignSuggestService.SuggestSmartCampaignBudgetOptions:input_type -> google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsRequest
	2,  // 11: google.ads.googleads.v8.services.SmartCampaignSuggestService.SuggestSmartCampaignBudgetOptions:output_type -> google.ads.googleads.v8.services.SuggestSmartCampaignBudgetOptionsResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_services_smart_campaign_suggest_service_proto_init() }
func file_services_smart_campaign_suggest_service_proto_init() {
	if File_services_smart_campaign_suggest_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_smart_campaign_suggest_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestSmartCampaignBudgetOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_smart_campaign_suggest_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartCampaignSuggestionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_smart_campaign_suggest_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestSmartCampaignBudgetOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_smart_campaign_suggest_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartCampaignSuggestionInfo_LocationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_smart_campaign_suggest_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestSmartCampaignBudgetOptionsResponse_Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_smart_campaign_suggest_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestSmartCampaignBudgetOptionsResponse_BudgetOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_services_smart_campaign_suggest_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SuggestSmartCampaignBudgetOptionsRequest_Campaign)(nil),
		(*SuggestSmartCampaignBudgetOptionsRequest_SuggestionInfo)(nil),
	}
	file_services_smart_campaign_suggest_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SmartCampaignSuggestionInfo_LocationList_)(nil),
		(*SmartCampaignSuggestionInfo_Proximity)(nil),
	}
	file_services_smart_campaign_suggest_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_smart_campaign_suggest_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_smart_campaign_suggest_service_proto_goTypes,
		DependencyIndexes: file_services_smart_campaign_suggest_service_proto_depIdxs,
		MessageInfos:      file_services_smart_campaign_suggest_service_proto_msgTypes,
	}.Build()
	File_services_smart_campaign_suggest_service_proto = out.File
	file_services_smart_campaign_suggest_service_proto_rawDesc = nil
	file_services_smart_campaign_suggest_service_proto_goTypes = nil
	file_services_smart_campaign_suggest_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SmartCampaignSuggestServiceClient is the client API for SmartCampaignSuggestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmartCampaignSuggestServiceClient interface {
	// Returns BudgetOption suggestions.
	SuggestSmartCampaignBudgetOptions(ctx context.Context, in *SuggestSmartCampaignBudgetOptionsRequest, opts ...grpc.CallOption) (*SuggestSmartCampaignBudgetOptionsResponse, error)
}

type smartCampaignSuggestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmartCampaignSuggestServiceClient(cc grpc.ClientConnInterface) SmartCampaignSuggestServiceClient {
	return &smartCampaignSuggestServiceClient{cc}
}

func (c *smartCampaignSuggestServiceClient) SuggestSmartCampaignBudgetOptions(ctx context.Context, in *SuggestSmartCampaignBudgetOptionsRequest, opts ...grpc.CallOption) (*SuggestSmartCampaignBudgetOptionsResponse, error) {
	out := new(SuggestSmartCampaignBudgetOptionsResponse)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v8.services.SmartCampaignSuggestService/SuggestSmartCampaignBudgetOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmartCampaignSuggestServiceServer is the server API for SmartCampaignSuggestService service.
type SmartCampaignSuggestServiceServer interface {
	// Returns BudgetOption suggestions.
	SuggestSmartCampaignBudgetOptions(context.Context, *SuggestSmartCampaignBudgetOptionsRequest) (*SuggestSmartCampaignBudgetOptionsResponse, error)
}

// UnimplementedSmartCampaignSuggestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSmartCampaignSuggestServiceServer struct {
}

func (*UnimplementedSmartCampaignSuggestServiceServer) SuggestSmartCampaignBudgetOptions(context.Context, *SuggestSmartCampaignBudgetOptionsRequest) (*SuggestSmartCampaignBudgetOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestSmartCampaignBudgetOptions not implemented")
}

func RegisterSmartCampaignSuggestServiceServer(s *grpc.Server, srv SmartCampaignSuggestServiceServer) {
	s.RegisterService(&_SmartCampaignSuggestService_serviceDesc, srv)
}

func _SmartCampaignSuggestService_SuggestSmartCampaignBudgetOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestSmartCampaignBudgetOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartCampaignSuggestServiceServer).SuggestSmartCampaignBudgetOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v8.services.SmartCampaignSuggestService/SuggestSmartCampaignBudgetOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartCampaignSuggestServiceServer).SuggestSmartCampaignBudgetOptions(ctx, req.(*SuggestSmartCampaignBudgetOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmartCampaignSuggestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.ads.googleads.v8.services.SmartCampaignSuggestService",
	HandlerType: (*SmartCampaignSuggestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuggestSmartCampaignBudgetOptions",
			Handler:    _SmartCampaignSuggestService_SuggestSmartCampaignBudgetOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/ads/googleads/v8/services/smart_campaign_suggest_service.proto",
}
